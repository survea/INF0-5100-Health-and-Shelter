/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.receptionistRole;

import business.EcoSystem;
import business.Organization;
import business.enterprise.Enterprise;
import business.organization.NurseOrganization;
import business.organization.ReceptionistOrganization;
import business.roles.AdminRole;
import business.roles.NurseRole;
import business.roles.Role;
import business.userAccount.UserAccount;
import business.workQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Diksha Godse
 */
public class HASPatientRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HASPatientRequests
     */
    JPanel userProcessContainer;
    UserAccount userAccount;
    ReceptionistOrganization organization;
    Enterprise enterprise;
    EcoSystem eco;

    HASPatientRequestsJPanel(JPanel userProcessContainer, UserAccount userAccount, ReceptionistOrganization organization, Enterprise enterprise, EcoSystem eco) {
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        initComponents();
        populateNurseListCmb();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        btnAssignToNurse = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        cmbNurseList = new javax.swing.JComboBox();

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Patient ", "Priority", "Age", "Request Type", "Status", "Disease", "Funded Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        btnAssignToNurse.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btnAssignToNurse.setText("ASSIGN TO Nurse For initial tests");
        btnAssignToNurse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToNurseActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        backJButton.setText("BACK");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(520, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAssignToNurse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbNurseList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(109, 109, 109))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(backJButton)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 880, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(331, Short.MAX_VALUE)
                .addComponent(cmbNurseList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAssignToNurse)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(backJButton)
                    .addContainerGap(51, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignToNurseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToNurseActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please make a selection");
            return;
        }
        UserAccount nurseUserAccount = (UserAccount) cmbNurseList.getSelectedItem();

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 4);
        if (request.getStatus().equals("Awaiting initial checkup - nurse")) {
            JOptionPane.showMessageDialog(null, "Patient Already Added");
            return;
        }
        if (nurseUserAccount.getRole() instanceof NurseRole) {
            request.setTypeOfRequest("InitialCheckupNurseAssigned");
            request.setStatus("Awaiting initial checkup - nurse");
            request.setReceiver(nurseUserAccount);
            //req.setPimage("Have to upload");
            ((UserAccount) nurseUserAccount).getWorkQueue().getWorkRequestList().add(request);
        }

//        if (request.getStatus().equals("Hospital Sent")) {
//            for (Organization organ : enterprise.getOrganizationDirectory().getOrganizationList()) {
//                System.out.println(organ.toString());
//                if (organ.toString().equals("Doctor Organization")) {
//                    for (UserAccount user : organ.getUserAccountDirectory().getUserAccountList()) {
//                        //request.setTypeOfRequest("Hospital Patient");
//                        request.setStatus("Assigned To Doctor");
//                        System.out.println(user.getUsername());
//                        user.getWorkQueue().getWorkRequestList().add(request);
//                        populateTable();
//                    }
//                    JOptionPane.showMessageDialog(null, "Patient Treatment request sent to Doctor!");
//                }
//            }
//        } else {
//            JOptionPane.showMessageDialog(null, "Patient has been added already to the Doctor");
//        }
    }//GEN-LAST:event_btnAssignToNurseActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnAssignToNurse;
    private javax.swing.JComboBox cmbNurseList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);
        System.out.println(userAccount.getWorkQueue().getWorkRequestList());
        for (UserAccount user : enterprise.getUserAccountDirectory().getUserAccountList()) {
            System.out.println(user.getRole().toString());
            if (user.getRole() instanceof AdminRole) {
                for (WorkRequest req : user.getWorkQueue().getWorkRequestList()) {
                    if (req.getStatus().equals("Awaiting initial checkup reports")) {
                        System.out.println(req);
                        Object[] row = new Object[8];
                        row[0] = req.getPatientfirstname();
                        row[1] = req.getPatientlastname();
                        row[2] = req.getPpriority();
                        row[3] = req.getAge();
                        row[4] = req;
                        row[5] = req.getStatus();
                        row[6] = req.getPdiagnosis();
                        row[7] = req.getApproxPatientFee();
                        model.addRow(row);
                    }

                }
            }
        }
    }

    private void populateNurseListCmb() {
        cmbNurseList.removeAllItems();
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof NurseOrganization) {
                for (UserAccount userAcc : org.getUserAccountDirectory().getUserAccountList()) {
                    if (userAcc.getRole() instanceof NurseRole) {
                        cmbNurseList.addItem(userAcc);
                    }
                }
            }
        }
    }
}
