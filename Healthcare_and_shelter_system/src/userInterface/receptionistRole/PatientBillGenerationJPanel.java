/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.receptionistRole;

import business.EcoSystem;
import business.enterprise.Enterprise;
import business.network.Network;
import business.organization.ReceptionistOrganization;
import business.roles.AdminRole;
import business.userAccount.UserAccount;
import business.workQueue.BillPayRequest;
import business.workQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Diksha Godse
 */
public class PatientBillGenerationJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientBillGenerationJPanel
     */
    private JPanel userProcessContainer;
    private ReceptionistOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem eco;
    private Network network;

    public PatientBillGenerationJPanel(JPanel userProcessContainer, UserAccount account, ReceptionistOrganization organization, Enterprise enterprise, Network network, EcoSystem eco) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.eco = eco;
        this.network = network;
        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

//        for (UserAccount user : organization.getUserAccountDirectory().getUserAccountList()) {
        for (UserAccount user : enterprise.getUserAccountDirectory().getUserAccountList()) {
            System.out.println(user.getWorkQueue().getWorkRequestList());
            for (WorkRequest req : user.getWorkQueue().getWorkRequestList()) {
                System.out.println(req.getStatus());
                if ((req.getStatus().equals("Bill Generated")) || (req.getStatus().equals("Hospital Treatment Completed")) || (req.getStatus().equals("Funds Processed"))) {
                    System.out.println(req);
                    Object[] row = new Object[6];
                    row[0] = req.getPatientfirstname();
                    row[1] = req.getPatientlastname();
                    row[2] = req;
                    row[3] = req.getStatus();
                    row[4] = req.getHospitalFee();
                    row[5] = req.getApproxPatientFee();
                    model.addRow(row);
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        btnGenerateBill = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PATIENT SUBMISSIONS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton1.setText("REFRESH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnGenerateBill.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btnGenerateBill.setText("GENERATE BILL");
        btnGenerateBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateBillActionPerformed(evt);
            }
        });

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Request Type", "Status", "Hospital Fee", "Funded Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(845, 845, 845)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 822, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGenerateBill)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(btnGenerateBill)
                .addContainerGap(238, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnGenerateBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateBillActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please make a selection");
            return;
        }
        WorkRequest work = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 2);
        if (work.getStatus().equals("Bill Generated")) {
            work.setStatus("Hospital Treatment Completed");
            JOptionPane.showMessageDialog(null, "Hospital Treatment Completed!");
        }
        if (work.getHospitalFee() == 0) {
            JOptionPane.showMessageDialog(null, "Already In Process. Sent to System Admin for processing payment!");
        } else {
            BillPayRequest request = new BillPayRequest();
            request.setPatientDetails(work);
            request.setRequest(work);
            System.out.println(work);
            request.setSender(userAccount);
            request.setAddress(enterprise.getName());
            request.setStatus("Pending payment");
            request.setMessage("Pay Bills");
            request.setTypeOfRequest("HospitalFee");
            request.setApproxPatientFee(work.getHospitalFee());
            for (Enterprise enterp : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterp.getEnterpriseType().equalsIgnoreCase(Enterprise.EnterpriseType.FundRaiser.getValue())) {
                    for (UserAccount userAcc : enterp.getUserAccountDirectory().getUserAccountList()) {
                        if (userAcc.getRole() instanceof AdminRole) {
                            userAcc.getWorkQueue().getWorkRequestList().add(request);
                            JOptionPane.showMessageDialog(null, "Bill Generated and Sent to HAS fund Admin for processing payment!");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnGenerateBillActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerateBill;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
